[{"C:\\Web Design\\Blog\\src\\index.js":"1","C:\\Web Design\\Blog\\src\\reportWebVitals.js":"2","C:\\Web Design\\Blog\\src\\App.js":"3","C:\\Web Design\\Blog\\src\\components\\AllPosts.js":"4","C:\\Web Design\\Blog\\src\\components\\OnePost.js":"5","C:\\Web Design\\Blog\\src\\client.js":"6","C:\\Web Design\\Blog\\src\\components\\elements\\Header.js":"7","C:\\Web Design\\Blog\\src\\components\\elements\\Nav.js":"8","C:\\Web Design\\Blog\\src\\components\\SortPosts.js":"9"},{"size":502,"mtime":1612034441031,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":1009,"mtime":1612220202488,"results":"13","hashOfConfig":"11"},{"size":2207,"mtime":1612220202454,"results":"14","hashOfConfig":"11"},{"size":4605,"mtime":1612220202468,"results":"15","hashOfConfig":"11"},{"size":180,"mtime":1611946906109,"results":"16","hashOfConfig":"11"},{"size":222,"mtime":1612204010927,"results":"17","hashOfConfig":"11"},{"size":922,"mtime":1612217836613,"results":"18","hashOfConfig":"11"},{"size":2170,"mtime":1612220334531,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1237r0n",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Web Design\\Blog\\src\\index.js",[],["42","43"],"C:\\Web Design\\Blog\\src\\reportWebVitals.js",[],"C:\\Web Design\\Blog\\src\\App.js",["44"],"C:\\Web Design\\Blog\\src\\components\\AllPosts.js",["45"],"import React,\r\n{\r\n    useEffect,\r\n    useState\r\n}\r\n\r\n    from 'react';\r\nimport sanityClient from \"../client.js\";\r\n\r\nimport {\r\n    Link\r\n}\r\n\r\n    from \"react-router-dom\";\r\n\r\nimport Header from \"./elements/Header\"\r\nimport Nav from \"./elements/Nav\"\r\n// import post from '../../recipeblog/schemas/post.js';\r\n\r\nexport default function AllPosts() {\r\n    // set up useState\r\n    const [allPostsData,\r\n        setAllPosts] = useState(null);\r\n\r\n    // fetch all data from sanity with a groc query\r\n    useEffect(() => {\r\n        sanityClient.fetch( // GROC query\r\n            // All(*) that have a type equal to post.\r\n            // then query for:\r\n            `*[_type == \"post\"]{\r\n                title,\r\n                slug,\r\n                mainImage{\r\n                    asset->{\r\n                        _id,\r\n                        url\r\n                    }\r\n                }\r\n            }`) // set all the data to setAllposts (setting the state)\r\n            .then((data) => setAllPosts(data)).then(console.log(\"DONE\")).catch(console.error);\r\n        // [] makes sure it stops, doesn't continue running.\r\n    }\r\n\r\n        , []) // \r\n\r\n\r\n    return <div>\r\n\r\n\r\n        <main className=\"post-list\">\r\n            <h1>Latest Recipes</h1>\r\n\r\n\r\n\r\n            {allPostsData && allPostsData.map((post, index) => (\r\n                <Link\r\n                    to={'/' + post.slug.current}\r\n                    key={post.slug.current}\r\n                    className=\"post-small-container\"\r\n                >\r\n                    <span className=\"post-small\"\r\n                        key={index}>\r\n                        <img src={post.mainImage.asset.url}\r\n                            height=\"300\"\r\n                            className=\"post-small-img\"\r\n                            alt=\"image for recipe\" />\r\n                        <span className=\"post-small-details\">\r\n                            <h2 className=\"post-small-title\"> {post.title}</h2>\r\n                            {post.description && <p className=\"post-small-description\"> {post.description}</p>}\r\n                        </span>\r\n                    </span>\r\n                </Link>\r\n            ))\r\n            }\r\n\r\n        </main></div>\r\n}","C:\\Web Design\\Blog\\src\\components\\OnePost.js",["46","47","48"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from \"react-router-dom\"\r\nimport sanityClient from \"../client.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport BlockContent from \"@sanity/block-content-to-react\";\r\nimport Header from \"./elements/Header\";\r\nimport Nav from \"./elements/Nav\";\r\n\r\n\r\n// sanity package to help with many images\r\nimport imageUrlBuilder from \"@sanity/image-url\";\r\n\r\nconst builder = imageUrlBuilder(sanityClient);\r\nfunction urlFor(source) {\r\n    return builder.image(source);\r\n}\r\n\r\n// Youtube ID Finder\r\nfunction youtubeParser(url) {\r\n    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n    var match = url.match(regExp);\r\n    return (match && match[7].length == 11) ? match[7] : false;\r\n}\r\n\r\nexport default function OnePost() {\r\n    // set state\r\n    const [postData, setPostData] = useState(null);\r\n    const { slug } = useParams();\r\n\r\n\r\n    // use useeffect to grab data from our sanity client\r\n    useEffect(() => {\r\n        sanityClient.fetch(\r\n            // All slugs.current that is equal to the slug we are clicking on $.\r\n            //AKA find jusut the slug we are clicking on\r\n            `*[slug.current == $slug]{\r\n                title,\r\n                slug,\r\n                mainImage{\r\n                    asset->{\r\n                        _id,\r\n                        url\r\n                    }\r\n                },\r\n                body,\r\n                description,\r\n                youtube,\r\n                ingredients,\r\n                prepTime,\r\n                cookTime,\r\n                servings,\r\n                ingredients\r\n            }`,\r\n            // indicate we are looking at a slug\r\n            { slug }\r\n        )\r\n            .then((data) => setPostData(data[0]))\r\n            .catch(console.error)\r\n    }, [slug]);\r\n\r\n\r\n\r\n    if (!postData) return (\r\n        <>\r\n            <Link to={'/'}><button>‹ Back to all recipes</button></Link>\r\n            {/* <div className=\"loading-text\">Setting the table...</div> */}\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Link to={'/'}><button>‹ Back to recipes</button></Link>\r\n\r\n            <main className=\"recipe-page\">\r\n                <h2 className=\"recipe-page-title\">{postData.title}</h2>\r\n                <blockquote>{postData.description}</blockquote>\r\n\r\n\r\n                <div className=\"recipe-page-details\">\r\n                    {postData.mainImage &&\r\n                        <img src={urlFor(postData.mainImage).width(500).url()} alt=\"main image of post\" className=\"recipe-page-img\" />\r\n                    }\r\n                    <div className=\"recipe-page-details__text\">\r\n                        <span><strong>Prep:</strong> {postData.prepTime}</span>\r\n                        <span><strong>Cook:</strong> {postData.cookTime}</span>\r\n                        <span><strong>Servings:</strong> {postData.servings}</span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div>\r\n                    {/* Youtube video */}\r\n                    {postData.youtube && <iframe width=\"560\" height=\"315\" src={`https://www.youtube.com/embed/${youtubeParser(postData.youtube)}`} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>}\r\n                    {/* {postData.ingredients && <div>{postData.ingredients}</div>} */}\r\n                    {/* Ingredients are rendered as <p> */}\r\n                    <div className=\"ingredients-list\">\r\n                        <h2 className=\"ingredients-list-header\">Ingredients</h2>\r\n                        <BlockContent\r\n                            blocks={postData.ingredients}\r\n                            projectId={sanityClient.clientConfig.projectId}\r\n                            dataset={sanityClient.clientConfig.dataset}\r\n                        />\r\n                    </div>\r\n                    <div className=\"steps\">\r\n                        {/* <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1MjwG7YzMFY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> */}\r\n                        <BlockContent\r\n                            blocks={postData.body}\r\n                            projectId={sanityClient.clientConfig.projectId}\r\n                            dataset={sanityClient.clientConfig.dataset}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}","C:\\Web Design\\Blog\\src\\client.js",["49"],"import sanityClient from \"@sanity/client\"\r\nimport { defaultCipherList } from \"constants\"\r\n\r\nexport default sanityClient({\r\n    projectId: \"1lhhpzey\",\r\n    dataset: \"production\"\r\n})","C:\\Web Design\\Blog\\src\\components\\elements\\Header.js",[],"C:\\Web Design\\Blog\\src\\components\\elements\\Nav.js",["50","51","52","53","54"],"C:\\Web Design\\Blog\\src\\components\\SortPosts.js",["55","56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":10,"column":10,"nodeType":"64","messageId":"65","endLine":10,"endColumn":14},{"ruleId":"66","severity":1,"message":"67","line":64,"column":25,"nodeType":"68","endLine":67,"endColumn":54},{"ruleId":"69","severity":1,"message":"70","line":22,"column":38,"nodeType":"71","messageId":"72","endLine":22,"endColumn":40},{"ruleId":"66","severity":1,"message":"67","line":86,"column":25,"nodeType":"68","endLine":86,"endColumn":135},{"ruleId":"73","severity":1,"message":"74","line":98,"column":42,"nodeType":"68","endLine":98,"endColumn":277},{"ruleId":"62","severity":1,"message":"75","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":13,"column":72,"nodeType":"68","endLine":13,"endColumn":113},{"ruleId":"76","severity":1,"message":"77","line":14,"column":68,"nodeType":"68","endLine":14,"endColumn":109},{"ruleId":"76","severity":1,"message":"77","line":15,"column":69,"nodeType":"68","endLine":15,"endColumn":110},{"ruleId":"76","severity":1,"message":"77","line":16,"column":70,"nodeType":"68","endLine":16,"endColumn":111},{"ruleId":"76","severity":1,"message":"77","line":17,"column":69,"nodeType":"68","endLine":17,"endColumn":110},{"ruleId":"62","severity":1,"message":"78","line":10,"column":9,"nodeType":"64","messageId":"65","endLine":10,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":35,"column":11,"nodeType":"81","endLine":35,"endColumn":13,"suggestions":"82"},{"ruleId":"66","severity":1,"message":"67","line":51,"column":23,"nodeType":"68","endLine":55,"endColumn":90},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'defaultCipherList' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'location' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'slug'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [slug]",{"range":"88","text":"89"},[998,1000],"[slug]"]